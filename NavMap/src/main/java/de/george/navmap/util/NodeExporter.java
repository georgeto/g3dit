package de.george.navmap.util;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.stream.Collectors;

import de.george.g3utils.io.G3FileReaderEx;
import de.george.g3utils.io.G3FileWriterEx;
import de.george.g3utils.structure.GuidUtil;
import de.george.g3utils.structure.bCBox;
import de.george.g3utils.structure.bCVector;
import de.george.lrentnode.archive.ArchiveFile;
import de.george.lrentnode.archive.eCEntity;
import de.george.lrentnode.archive.node.NodeEntity;
import de.george.lrentnode.classes.G3Class;
import de.george.lrentnode.classes.desc.CD;
import de.george.lrentnode.properties.bCPropertyID;
import de.george.lrentnode.util.FileUtil;
import de.george.navmap.data.NegCircle;
import de.george.navmap.data.NegZone;
import de.george.navmap.data.PrefPath;

public class NodeExporter {
	private static G3FileWriterEx serializeEntity(eCEntity entity) {
		G3FileWriterEx writer = new G3FileWriterEx();
		entity.write(writer);
		return writer;
	}

	private static eCEntity deserializeEntity(G3FileWriterEx writer) {
		G3FileReaderEx reader = new G3FileReaderEx(writer.getData());
		reader.setStringtable(writer.getStringtable());
		eCEntity result = new NodeEntity(false);
		result.read(reader, false);
		return result;
	}

	private static bCBox getBoundingBoxFromPointsAndRadius(List<bCVector> points, List<Float> radius) {
		bCBox boundingBox = new bCBox();
		for (int i = 0; i < points.size(); i++) {
			bCVector point = points.get(i);
			float r = radius.get(i);
			boundingBox.merge(point.getInvTranslated(r, r, r));
			boundingBox.merge(point.getTranslated(r, r, r));
		}
		return boundingBox;
	}

	public static <T> List<ArchiveFile> exportNavObjects(String archiveFileTemplate, Iterable<T> negObjects,
			BiConsumer<T, eCEntity> populateEntity) {
		List<ArchiveFile> result = new ArrayList<>();

		Iterator<T> iter = negObjects.iterator();
		while (iter.hasNext()) {
			ArchiveFile aFile = FileUtil.createArchive(archiveFileTemplate);
			aFile.getGraph().setGuid(GuidUtil.randomGUID());

			eCEntity blueprintEntity = aFile.getGraph().getChilds().get(0);
			blueprintEntity.removeFromParent(false);
			G3FileWriterEx blueprintSerialized = serializeEntity(blueprintEntity);

			int count = 0;
			while (count++ < 60000 && iter.hasNext()) {
				eCEntity entity = deserializeEntity(blueprintSerialized);
				populateEntity.accept(iter.next(), entity);
				aFile.getGraph().attachChild(entity);
			}

			aFile.getGraph().updateParentDependencies();
			result.add(aFile);
		}

		return result;
	}

	public static List<ArchiveFile> exportNegCircles(Iterable<NegCircle> negCircles) {
		return exportNavObjects(
				
				negCircles, (negCircle, entity) -> {
					bCVector position = bCVector.averageVector(negCircle.circleOffsets);
					entity.setGuid(GuidUtil.randomGUID());
					entity.setWorldPosition(position);

					List<bCVector> points = toRelative(negCircle.circleOffsets, position);
					entity.updateLocalNodeBoundary(getBoundingBoxFromPointsAndRadius(points, negCircle.circleRadius));

					G3Class negCirclePS = entity.getClass(CD.gCCollisionCircle_PS.class);
					negCirclePS.property(CD.gCCollisionCircle_PS.CircleCount).setLong(negCircle.circleOffsets.size());
					negCirclePS.property(CD.gCCollisionCircle_PS.DefaultRadius).setFloat(200.0f);
					negCirclePS.property(CD.gCCollisionCircle_PS.Offset).setEntries(points);
					negCirclePS.property(CD.gCCollisionCircle_PS.Radius).setNativeEntries(negCircle.circleRadius);
					negCirclePS.property(CD.gCCollisionCircle_PS.Type).setEnumValue(negCircle.obstacleType);
					negCirclePS.property(CD.gCCollisionCircle_PS.ZoneEntityIDs).setEntries(negCircle.zoneGuids, bCPropertyID::new);
				});
	}

	private static List<bCVector> toRelative(List<bCVector> points, bCVector position) {
		return points.stream().map(p -> p.getInvTranslated(position)).collect(Collectors.toList());
	}

	public static ArchiveFile exportPrefPaths(Iterable<PrefPath> prefPaths) {
		return exportNavObjects(
				"47454E4F4D464C450100AB0300005300020000000000230000FFFF7F7FFFFF7F7FFFFF7F7FFFFF7FFFFFFF7FFFFFFF7FFF000000000000000000000000FFFF7F7FFFFF7F7FFFFF7F7F0000803F0000000000000000000000000000803F0000000000000000000000800000803F530001000000000000000000000000000000000000000000010100010001010000803F00000000000000000000803F000000000000000000000000000000000000803F000000000000000000000000000000800000803F000000000000000000000000000000000000803F0000803F000000000000000000000000000000000000803F000000000000000000000000000000800000803F000000000000000000000000000000000000803FFFFF7F7FFFFF7F7FFFFF7F7FFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F7FFFFF7F7FFFFF7F7FFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F7FFFFF7F7FFFFF7F7FFFFF7FFFFFFF7FFFFFFF7FFF0000807F0000000000000000000000000000807F0000000000000000000000000000803F000000803FFFFFFFFF0000803F00000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000803F0000000000000000000000000000803F0000000000000000000000000000803F530001000000000000000000000000000000000000000000010100010001010000803F01000000000001000000803F000000000000000000000000000000000000803F000000000000000000000000000000000000803F000000000000000000000000000000000000803F0000803F000000000000000000000000000000000000803F000000000000000000000000000000000000803F000000000000000000000000000000000000803F00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000803F010000803FFFFFFFFF0000803F0000010000000100010001010001020001000053005300680000001E0005000000030004001E00050000000100000000050006001E00050000000100000000070008001E00040000000000000009000A001E000C0000000000000000000000000000000B000C001E001400000000000000000000000000000000000000000000002500DEC0ADDE0000000001000000FFFFFFFFFFFFFFFFEFBEADDE010D0000000400526F6F740C004E61765F50726566506174680D00674350726566506174685F50530500506F696E741A00625456616C41727261793C636C617373206243566563746F723E0B00506F696E745261646975731100625456616C41727261793C666C6F61743E06005261646975730500666C6F61740C005261646975734F666673657408006243566563746F720C005A6F6E65456E7469747949440C00624350726F70657274794944",
				prefPaths, (prefPath, entity) -> {
					bCVector position = bCVector.averageVector(prefPath.getPoints());
					entity.setGuid(GuidUtil.randomGUID());
					entity.setWorldPosition(position);

					List<bCVector> points = toRelative(prefPath.getPoints(), position);
					entity.updateLocalNodeBoundary(getBoundingBoxFromPointsAndRadius(points, prefPath.getPointRadius()));

					G3Class prefPathPS = entity.getClass(CD.gCPrefPath_PS.class);
					prefPathPS.property(CD.gCPrefPath_PS.Point).setEntries(points);
					prefPathPS.property(CD.gCPrefPath_PS.PointRadius).setNativeEntries(prefPath.getPointRadius());
					prefPathPS.property(CD.gCPrefPath_PS.Radius).setFloat(prefPath.getRadius());
					prefPathPS.setPropertyData(CD.gCPrefPath_PS.RadiusOffset, new bCVector(0, 0, 0));
					prefPathPS.property(CD.gCPrefPath_PS.ZoneEntityID).setGuid(prefPath.getZoneGuid());
				}).get(0);
	}

	public static ArchiveFile exportNegZones(Iterable<NegZone> negZones) {
		return exportNavObjects(
				
				negZones, (negZone, entity) -> {
					bCVector position = bCVector.averageVector(negZone.getWorldPoints());
					entity.setGuid(negZone.getGuid());
					entity.setWorldPosition(position);

					List<bCVector> points = toRelative(negZone.getPoints(), position);
					entity.updateLocalNodeBoundary(points.stream().reduce(new bCBox(), bCBox::merge, bCBox::merge));

					G3Class negZonePS = entity.getClass(CD.gCNegZone_PS.class);
					negZonePS.property(CD.gCNegZone_PS.Point).setEntries(points);
					negZonePS.property(CD.gCNegZone_PS.Radius).setFloat(negZone.getRadius());
					negZonePS.setPropertyData(CD.gCNegZone_PS.RadiusOffset, new bCVector(0, 0, 0));
					negZonePS.property(CD.gCNegZone_PS.ZoneEntityID).setGuid(negZone.getZoneGuid());
					negZonePS.property(CD.gCNegZone_PS.ZoneIsCCW).setBool(negZone.isCcw());
				}).get(0);
	}
}
