plugins {
	id 'com.github.ben-manes.versions' version '0.51.0' apply false
	id 'com.github.vlsi.gettext' version '1.76-CUSTOM'
}

import com.github.vlsi.gradle.gettext.GettextTask
import com.github.vlsi.gradle.gettext.MsgAttribTask
import com.github.vlsi.gradle.gettext.MsgFmtTask
import com.github.vlsi.gradle.gettext.MsgMergeTask


def eclipseFiles = "$rootDir/eclipse"
def buildshipPrefFile = "org.eclipse.buildship.core.prefs"

allprojects {
	/*
	 * Within 'subprojects {}', the Gradle 'plugins {}' block cannot be used yet, see 
	 * https://docs.gradle.org/current/userguide/plugins.html#N12EB3
	 */
	// TODO: Replace with 'plugins {}' block
	apply plugin: 'eclipse'
	apply plugin: 'java'
	apply plugin: 'java-library'

	tasks.withType(JavaCompile).all {
		sourceCompatibility = 17 // for the IDE support
		options.release = 8
		options.encoding = 'UTF-8'

		javaCompiler = javaToolchains.compilerFor {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}

	repositories {
		mavenCentral()
	}

	tasks.eclipse.dependsOn(cleanEclipse)

	cleanEclipse {
		doLast {
			for (File f : fileTree("$eclipseFiles") { include '*.prefs' }.getFiles()) {
				delete "$projectDir/.settings/" + f.name
			}
		}
	}

	eclipse.classpath {
		containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
		containers 'org.springsource.ide.eclipse.gradle.classpathcontainer'
	}

	eclipse.project {
		natures 'org.eclipse.buildship.core.gradleprojectnature'
		buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'

		natures 'org.springsource.ide.eclipse.gradle.core.nature'
	}

	eclipseJdt {
		doLast {
			// install Buildship preference files
			project.copy {
				from(eclipseFiles) {
					include buildshipPrefFile
				}
				into '.settings'

				expand(projectPath: "\\:$project.name")
				filteringCharset = 'UTF-8'
			}
		}
	}

	dependencies {
		annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:1.0.0'
		compileOnly 'com.github.bsideup.jabel:jabel-javac-plugin:1.0.0'
	}
}

subprojects {
	apply plugin: 'com.github.ben-manes.versions'

	repositories {
		mavenCentral()

		flatDir {
			dirs '../G3Utils/libs'
		}

		flatDir {
			dirs '../LrentNode/libs'
		}
	}

	def cpAttributesNode = new NodeBuilder().attributes {
		attribute(name: 'FROM_GRADLE_MODEL', value: true)
	}

	eclipse.classpath {
		file {
			whenMerged { classpath ->
				classpath.entries.each { entry ->
					if (entry.kind == 'con' && entry.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER'))
						entry.path = 'org.eclipse.jdt.launching.JRE_CONTAINER'
				}
			}
			withXml { xml ->
				xml.asNode().value().stream().filter { entry ->
					entry.attribute('kind') == 'src'
				}.forEach { entry ->
					entry.append(cpAttributesNode)
				}
			}
		}
	}

	eclipse.project {
		natures 'org.eclipse.jdt.core.javanature'
		buildCommand 'org.eclipse.jdt.core.javabuilder'
	}

	eclipseJdt {
		doLast {
			// install Eclipse preference files
			project.copy {
				from(eclipseFiles) {
					include '*.prefs'
					exclude buildshipPrefFile
				}
				into '.settings'
			}
		}
	}
}

task updatePot(type: GettextTask) {
	// TODO: The paths generated in the .pot file are \ for windows, and / for linux...
	sourceFiles.from(project("G3Utils").sourceSets.main.allJava, project("LrentNode").sourceSets.main.allJava,
			project("NavMap").sourceSets.main.allJava, project("g3dit").sourceSets.main.allJava)
	keywords = ["", "trc:1c,2", "trcw:1c,2", "trcf:1c,2", "trcfw:1c,2", "tr", "trj", "trfj", "trw", "trf", "trfw"]
	nowrap = true
}

task removeObsoleteTranslations(type: MsgAttribTask) {
	args = ["--no-obsolete", "--no-wrap"]
	poFiles.from(files(project("g3dit").sourceSets.main.allSource).filter { it.path.endsWith(".po") })
}

task addNewMessagesToPo(type: MsgMergeTask) {
	poFiles.from(removeObsoleteTranslations)
	potFile = updatePot.outputPot
	args = ["--previous", "--no-wrap"]
}

task generateJavaResources(type: MsgFmtTask) {
	poFiles.from(addNewMessagesToPo)
	targetBundle.set("de.george.g3dit.translation.messages")
}

task generateGettextSources() {
	group = LifecycleBasePlugin.BUILD_GROUP
	description = "Updates .po, .pot, and .java files in src/main/java/de/george/g3dit/translation"
	dependsOn(addNewMessagesToPo)
	dependsOn(generateJavaResources)
	doLast {
		copy {
			into("g3dit/src/main/java")
			from(generateJavaResources)
			into("de/george/g3dit/translation") {
				from(updatePot)
				from(addNewMessagesToPo)
			}
		}
	}
}

interface InjectedExecOps {
    @Inject //@javax.inject.Inject
    ExecOperations getExecOps()
}

task cleanupTranslation() {
	outputs.upToDateWhen { false }

	def injected = project.objects.newInstance(InjectedExecOps)
	doLast {
		var diffOutput = new ByteArrayOutputStream()
		injected.execOps.exec {
			executable = "git"
			standardOutput = diffOutput
			workingDir = file("$projectDir")
			args('diff')
			args('--ignore-matching-lines="^#"')
			args('--ignore-matching-lines="^\\"PO-Revision-Date"')
			args('--ignore-matching-lines="^\\"POT-Creation-Date"')
			args('--ignore-matching-lines="^\\"X-Generator"')
			args('--')
			args('g3dit/src/main/java/de/george/g3dit/translation/')
		}

		println "Diff translation"
		println diffOutput.toString()

		injected.execOps.exec {
			executable = "git"
			workingDir = file("$projectDir")
			args('checkout')
			args('--')
			args('g3dit/src/main/java/de/george/g3dit/translation/')
		}

		if (diffOutput.size() > 0) {
			injected.execOps.exec {
				standardInput = new ByteArrayInputStream(diffOutput.toByteArray())
				executable = "git"
				workingDir = file("$projectDir")
				args('apply')
				args('-')
			}
		}
	}
}
